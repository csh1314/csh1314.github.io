<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端面试知识总结(一)</title>
      <link href="2021/03/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93-%E4%B8%80/"/>
      <url>2021/03/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-HTML-浏览器"><a href="#HTTP-HTML-浏览器" class="headerlink" title="HTTP/HTML/浏览器"></a>HTTP/HTML/浏览器</h1><h2 id="说一下http和https"><a href="#说一下http和https" class="headerlink" title="说一下http和https"></a>说一下http和https</h2><p>https的SSL加密实在传输层实现的。</p><p>(1)http和https的基本概念</p><p>http：超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准(TCP)，用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>https：是以安全为目标的http通道，简单来讲是http的安全版，即http下加入SSL层，https的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p>https协议的主要作用：建立一个信息安全通道，来确保数据的传输和网站的真实性。</p><p>(2)http与https的区别</p><p>http传输的数据都是未加密的，也就是明文的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。</p><p>主要区别如下：</p><ul><li>https协议需要ca证书，费用较高。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>使用不同的链接方式，端口也不同，一般而言，http协议的端口为80， https的端口为 443.</li><li>http的连接较简单，是无状态的；https协议是SSL+http协议构建的可进行假面传输、身份认证的网络协议，比http协议安全。</li></ul><p>(3)https协议的工作原理</p><p>客户端在使用https方式与web服务器通信时有以下几个步骤：</p><ol><li>客户使用https url 访问服务器，则要求web服务器建立ssl链接。</li><li>web服务器接收客户端请求后，会将网站证书(包含公钥)返回/传输给客户端。</li><li>客户端和web服务器端开始协商SSL链接的安全等级,即加密等级。</li><li>客户端浏览器通过双方协商一致的安全等级，建立会话秘钥，然后通过网站的公钥来加密会话秘钥，并传送给网站。</li><li>web服务器会通过自己的私钥解密出会话密钥。</li><li>web服务器通过会话秘钥加密与客户端之间的通信。</li></ol><p>(4)https协议的优点</p><ul><li>使用https协议可认证用户和服务器，确保数据发送到正确的客户机和服务器</li><li>https协议是有ssl+http协议构建的可进行加密传输、身份认证1的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性</li><li>https是现行架构下最安全的解决方案，虽然不是绝对安全，但其大幅增加了中间人攻击的成本</li><li>Google曾在2014年调整搜索引擎算法，并称“比起等同http网站，采用https加密的网站在搜索结果中的排名会更高”</li></ul><p>(5)https协议的缺点</p><ul><li>https握手阶段会比较费时，使页面加载时间延长50%，增加10%~20%耗电</li><li>https缓存不如http高效，会增加数据开销</li><li>SSL证书也需要钱，功能越强大的证书费用越高</li><li>SSL证书需要绑定IP，不能在同一IP上绑定多个域名，ipv4资源支持不了这种消耗</li></ul><h2 id="tcp三次握手，一句话概括"><a href="#tcp三次握手，一句话概括" class="headerlink" title="tcp三次握手，一句话概括"></a>tcp三次握手，一句话概括</h2><p>客户端与服务端都需要确保各自都可收发，因此需要三次握手。</p><p>简化三次握手：</p><p><img src= "/img/loading.gif" data-lazy-src="https://uploadfiles.nowcoder.com/files/20210327/908402659_1616810523093/42496289-1c6d668a-8458-11e8-98b3-65db50f64d48.png" alt="三次握手" title="图片标题"> </p><p>概括：C发起请求连接S确认，同时S也发起请求连接C确认，最后建立连接</p><ul><li>第一次握手：S确认是否可以接收C发送的报文段</li><li>第二次握手：C已经确认了S可以收到自己发送的报文段，C再来确认自己是否可以接收S发送的报文段</li><li>第三次握手：S确认了C收到了自己发送的报文段</li></ul><h2 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h2><ol><li>TCP是面向连接的，UDP是无连接的，即发送数据前不需要先建立连接</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达；而UDP尽最大努力也不能保证是否可靠交付。因为TCP可靠，面向连接，不会丢失数据因此适合大数据量交换</li><li>TCP是面向字节流，UDP面向报文，并且网络出现拥塞不会使得发送速率降低(因此会出现丢包，对实时的应用比如IP电话和视频会议等)</li><li>TCP只能1对1，而UDP支持1对1和1对多</li><li>TCP的首部较大为20字节，而UDP只有8字节</li><li>TCP是面向连接的可靠性传输，而UDP是不可靠的</li></ol><h2 id="WebSocket的实现和应用"><a href="#WebSocket的实现和应用" class="headerlink" title="WebSocket的实现和应用"></a>WebSocket的实现和应用</h2><p>(1)什么是WebSocket？</p><p>WebSocket是HTML5中的协议，支持持久连接，http协议不支持持久性连接。http1.0/1.1都不支持持久性连接，http1.1中的keep-alive能将多个http请求合并为1个</p><p>(2)WebSocket是怎样的协议，有何优点？</p><p>WebSocket是基于http协议的，或者说是借用了http协议来完成一部分握手，在握手阶段与http协议是相同的。一个WebSocket握手协议的实现，基本是2个属性： upgrade、connection</p><p>基本的请求格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;chat HTTP&#x2F;1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: http:&#x2F;&#x2F;example.com</span><br></pre></td></tr></table></figure><p>多出了下面2个属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Upgrade:webSocket</span><br><span class="line">Connection:Upgrade</span><br></pre></td></tr></table></figure><p>同时告诉服务器发送的是websocket</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><h2 id="HTTP请求的方式，HEAD方式"><a href="#HTTP请求的方式，HEAD方式" class="headerlink" title="HTTP请求的方式，HEAD方式"></a>HTTP请求的方式，HEAD方式</h2><p>head：类似于get请求，只不过返回的响应中没有具体的内容，用户获取抱头</p><p>options：允许客户端查看服务器的性能，比如说服务器支持的请求方式等</p><h2 id="一个图片url访问后直接下载怎样实现"><a href="#一个图片url访问后直接下载怎样实现" class="headerlink" title="一个图片url访问后直接下载怎样实现"></a>一个图片url访问后直接下载怎样实现</h2><p>请求的返回头里面，用于浏览器解析的重要参数是OSS里API文档内的返回http头，有着决定用户下载行为的参数。</p><p>下载情况样例如下：</p><ol><li><p>x-oss-object-type:Normal</p></li><li><p>x-oss-request-id:598D5ED34F29D01FE2925F41</p></li><li><p>x-oss-storage-class:Standard</p></li></ol><h2 id="输入URL到页面加载显示完成了什么？"><a href="#输入URL到页面加载显示完成了什么？" class="headerlink" title="输入URL到页面加载显示完成了什么？"></a>输入URL到页面加载显示完成了什么？</h2><ol><li>输入地址，发送至DNS服务器，解析获取相应的域名和web服务器的IP地址</li><li>与web服务器建立TCP连接</li><li>浏览器向web服务器发送HTTP请求</li><li>服务器响应请求，并发送对应的数据</li><li>浏览器下载数据并解析源文件，渲染页面，呈现页面</li><li>连接结束</li></ol><h2 id="说一下web-Quality-（无障碍）"><a href="#说一下web-Quality-（无障碍）" class="headerlink" title="说一下web Quality （无障碍）"></a>说一下web Quality （无障碍）</h2><p>表示是能够被残障人士使用的网站才能称得上一个易用的(易访问的)网站。</p><p>使用alt属性：</p><p>​    <code>&lt;img src=&quot;person.jpg&quot; alt=&quot;this is a person&quot;&gt;</code></p><p>有时浏览器无法显示图像,具体原因可能为：</p><ol><li>用户关闭了图像显示</li><li>浏览器为不支持图像显示的迷你浏览器</li><li>浏览器是语言浏览器(供盲人和弱视群体使用)</li></ol><p>若使用了alt属性，那么浏览器至少可以显示或读出有关图像的描述。</p><h2 id="几个很实用的BOM属性对象方法？"><a href="#几个很实用的BOM属性对象方法？" class="headerlink" title="几个很实用的BOM属性对象方法？"></a>几个很实用的BOM属性对象方法？</h2><p>什么是BOM？ BOM是<strong>浏览器对象</strong>。有哪些常用的BOM属性呢？</p><p>(1)location对象</p><ul><li>location.href：返回或设置当前文档的URL</li><li>location.search：返回URL中的查询字符串部分。例如 <code>http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu</code> 返回”?”后并包括”?”的内容 <code>?id=5&amp;name=dreamdu</code></li><li>location.hash：返回URL#后的内容，若没有#，返回空</li><li>location.host：返回URL中的域名部分，例如 <code>www.dreamdu.com</code></li><li>location.hostname：返回URL中的主域名部分, 例如<code>dreamdu.com</code></li><li>location.port：返回URL中的端口部分。</li><li>location.protocol：返回URL中的协议部分，例如<code>http://www.dreamdu.com:8080/xhtml/</code>返回<code>http</code></li><li>location.assign：设置当前文档的URL</li><li>location.replace()：设置当前文档的URL，并且在history对象的地址列表中移除这个URL location.replace(url)</li><li>location.reload()：重载当前页面</li></ul><p>(2)history对象</p><ul><li>history.go()：前进(+)或后退(-)指定的页面数 history.go(nums)</li><li>history.back()：后退一页</li><li>history.foward()：前进一页</li></ul><p>(3)Navigator对象</p><ul><li>navigator.userAgent：返回用户代理头的字符串表示(包含浏览器版本信息等的字符串</li><li>navigator.cookieEnabled：返回浏览器是否支持(启用)cookie</li></ul><h2 id="说一下HTML5-drag-api"><a href="#说一下HTML5-drag-api" class="headerlink" title="说一下HTML5 drag api"></a>说一下HTML5 drag api</h2><ul><li>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发</li><li>drag：事件主体是被拖放元素，在正在拖放其时触发</li><li>dragenter：事件主体是目标元素，在被拖放元素进入该元素时触发</li><li>dragover：事件主体是目标元素，在被拖放元素在该元素内移动时触发</li><li>dragleave：事件主体是目标元素，在被拖放元素移出目标元素时触发</li><li>drop：事件主体是目标元素，在目标元素完全接收被拖放元素时触发</li><li>dragend：事件主体是被拖放元素，拖放操作结束时触发</li></ul><h2 id="说一下http2-0"><a href="#说一下http2-0" class="headerlink" title="说一下http2.0"></a>说一下http2.0</h2><p>首先补充一下http与https(http+ssl加密)区别</p><p>再简要概括：http2.0是基于1999年发布的http1.0之后的首次更新</p><ol><li>提升了访问速度(请求资源所需时间更少，访问速度更快，相比于http1.0)</li><li>允许多路复用：多路复用允许同时通过单一的http连接发送多重请求并响应信息。改善了：在http1.1中浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制(连接数量)，超过限制会被阻塞</li><li>二进制分帧：http2.0会将所有的传输信息分割为更小的信息或者帧，并对他们进行二进制编码</li><li>首部压缩</li><li>服务器端推送</li></ol><h2 id="http常用请求头"><a href="#http常用请求头" class="headerlink" title="http常用请求头"></a>http常用请求头</h2><table><thead><tr><th align="left">协议头</th><th>说明</th></tr></thead><tbody><tr><td align="left">Accept</td><td>可接受的响应内容类型（Content-Types）。</td></tr><tr><td align="left">Accept-Charset</td><td>可接受的字符集</td></tr><tr><td align="left">Accept-Encoding</td><td>可接受的响应内容的编码方式。</td></tr><tr><td align="left">Accept-Language</td><td>可接受的响应内容语言列表。</td></tr><tr><td align="left">Accept-Datetime</td><td>可接受的按照时间来表示的响应内容版本</td></tr><tr><td align="left">Authorization</td><td>用于表示HTTP协议中需要认证资源的认证信息</td></tr><tr><td align="left">Cache-Control</td><td>用来指定当前的请求/回复中的，是否使用缓存机制。</td></tr><tr><td align="left">Connection</td><td>客户端（浏览器）想要优先使用的连接类型</td></tr><tr><td align="left">Cookie</td><td>由之前服务器通过Set-Cookie（见下文）设置的一个HTTP协议Cookie</td></tr></tbody></table><h2 id="HTTP常见状态码"><a href="#HTTP常见状态码" class="headerlink" title="HTTP常见状态码"></a>HTTP常见状态码</h2><p>200  OK  请求成功。一般用于GET与POST请求</p><p>201  Created  已创建。成功请求并创建了新的资源</p><p>202  Accepted  已接受。已经接受请求，但未处理完成</p><p>203  Non-Authoritative Information  非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</p><p>204  No Content  无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</p><p>205  Reset Content  重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</p><p>206  Partial Content  部分内容。服务器成功处理了部分GET请求</p><p>300  Multiple Choices  多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</p><p>301  Moved Permanently  永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</p><p>302  Found  临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</p><p>303  See Other  查看其它地址。与301类似。使用GET和POST请求查看</p><p>304  Not Modified  未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</p><p>305  Use Proxy  使用代理。所请求的资源必须通过代理访问</p><p>306  Unused  已经被废弃的HTTP状态码</p><p>307  Temporary Redirect  临时重定向。与302类似。使用POST请求重定向</p><p>400  Bad Request  客户端请求的语法错误，服务器无法理解</p><p>401  Unauthorized  请求要求用户的身份认证</p><p>402  Payment Required  保留，将来使用</p><p>403  Forbidden  服务器理解请求客户端的请求，但是拒绝执行此请求</p><p>404  Not Found  服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</p><p>500  Internal Server Error  服务器内部错误，无法完成请求</p><p>501  Not Implemented  服务器不支持请求的功能，无法完成请求</p><p>502  Bad Gateway  作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</p><p>503  Service Unavailable  由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</p><p>504  Gateway Time-out  充当网关或代理的服务器，未及时从远端服务器获取请求</p><p>505  HTTP Version not supported  服务器不支持请求的HTTP协议的版本，无法完成处理</p><h2 id="补充400和401、403状态码"><a href="#补充400和401、403状态码" class="headerlink" title="补充400和401、403状态码"></a>补充400和401、403状态码</h2><p>(1)400状态码：请求无效</p><p>产生原因：</p><ul><li>前端提交数据的字段名称和字段类型与后台的实体没有保持一致</li><li>前端提交到后台的数据应该是json字符串类型，但前端未将对象<code>JSON.stringify()</code>化</li></ul><p>解决办法：</p><ul><li>对照字段名称，保持一致性</li><li>将对象通过<code>JSON.stringify()</code>进行序列化</li></ul><p>(2)401状态码：该请求需要用户验证权限</p><p>(3)403状态码：服务器已得到请求，但拒绝执行</p><h2 id="fetch发送2次请求的原因"><a href="#fetch发送2次请求的原因" class="headerlink" title="fetch发送2次请求的原因"></a>fetch发送2次请求的原因</h2><p>fetch发送post请求的时候，总是发送2次，第一次204，第二次才成功？</p><p>原因很简单，因为你用fetch的post请求时，导致fetch第一次发送了一个Options请求，询问服务器是否支持修改的请求头，如果服务器支持，则在第二次中发送真正的请求。</p><h2 id="Cookie、sessionStorage、localStorage的区别"><a href="#Cookie、sessionStorage、localStorage的区别" class="headerlink" title="Cookie、sessionStorage、localStorage的区别"></a>Cookie、sessionStorage、localStorage的区别</h2><p>相同点：都是保存在浏览器端，且是同源的。</p><p>区别：</p><ul><li>Cookie： cookie数据始终在同源的http请求中携带(即使不需要),即<strong>cookie在浏览器和服务器间来回传递</strong>。二sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径(path)的概念，可以限制cookie只属于某个路径下，<strong>存储容量很小只有4k左右</strong>。cookie在设置的过期时间之前一直有效。</li><li>sessionStorage：仅在当前浏览器窗口关闭前有效，<strong>不可持久保持</strong>。session本身就是一个会话过程，当页面不同即使是同一页面打开两次，也被视为同一次会话。</li><li>localStorage：<strong>始终有效</strong>除非手动删除，窗口或浏览器关闭也一直保存，因此用作持久数据。和cookie一样在所有同源窗口中都是共享的</li></ul><p>补充cookie的作用及应用场景：</p><ul><li>保存登录态。例如将用户id存储于一个cookie内，并设置一定的过期时间。在用户下次访问该页面时不必重复登录。</li><li>跟踪用户行为。例如一个天气预报网站，不必每次进入都需要选择所在地，使用cookie来使系统记住上一次访问的地区。当用户再次访问时，自动显示上次访问地区的天气。</li><li>网站主题——换肤、布局等设置。利用cookie来记录用户的选项比如背景色、界面风格等</li></ul><h2 id="说一下web-worker"><a href="#说一下web-worker" class="headerlink" title="说一下web worker"></a>说一下web worker</h2><p>在HTML页面中，如果在执行脚本时，页面的状态是不可响应的，直到脚本执行完成后，页面才变成可响应。web worker是运行在后台的js，独立于其他脚本，不会影响页面性能。并且能通过<strong>postMessage</strong>将结果回传到主线程。这样在进行复杂操作时就不会阻塞主线程了。</p><p>如何创建web worker：</p><ul><li>检测浏览器对web worker的支持性</li><li>创建web worker文件(js, 回传函数等)</li><li>创建web worker对象</li></ul><h2 id="iframe是什么？有何缺点？"><a href="#iframe是什么？有何缺点？" class="headerlink" title="iframe是什么？有何缺点？"></a>iframe是什么？有何缺点？</h2><p>定义：iframe元素会创建包含另一个文档的内联框架</p><p>提示：可以将提示文字放在<code>&lt;iframe&gt;&lt;/iframe&gt;</code>内，来提示某些不支持iframe的浏览器</p><p>缺点：</p><ul><li>会阻塞主页面的onload事件</li><li>搜索引擎无法解读这种页面，不利于SEO</li><li>iframe和主页面共享连接池，而浏览器对相同区域有限制所以会影响性能</li></ul><h2 id="Doctype作用？严格模式与混杂模式如何区分？它们有何意义？"><a href="#Doctype作用？严格模式与混杂模式如何区分？它们有何意义？" class="headerlink" title="Doctype作用？严格模式与混杂模式如何区分？它们有何意义？"></a>Doctype作用？严格模式与混杂模式如何区分？它们有何意义？</h2><p>Doctype声明于文档最前面，告诉浏览器是以何种方式来渲染页面，这里有两种模式，严格模式和混杂模式。</p><p>严格模式的排版和JS运作模式是以该浏览器支持的最高标准运行。</p><p>混杂模式，向后兼容，模拟老式浏览器，防止浏览器无法兼容页面。</p><h2 id="Cookie如何防范XSS攻击"><a href="#Cookie如何防范XSS攻击" class="headerlink" title="Cookie如何防范XSS攻击"></a>Cookie如何防范XSS攻击</h2><p>XSS(跨站脚本攻击)是指攻击者在返回的HTML中嵌入了JavaScript脚本，为了减轻这些攻击，需要在HTTP头部配置：<code>set-cookie：</code></p><ul><li>httponly : 可以防止XSS，它会禁止JavaScript脚本来访问cookie</li><li>secure：告诉浏览器仅在请求为https的时候发送cookie</li></ul><p>结果应为： <code>Set-Cookie = &lt;cookie-value&gt;...</code></p><h2 id="Cookie和session的区别"><a href="#Cookie和session的区别" class="headerlink" title="Cookie和session的区别"></a>Cookie和session的区别</h2><ol><li><p>cookie数据存放在客户的浏览器上，session数据放在服务器上。</p></li><li><p>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗<br>考虑到安全应当使用session。</p></li><li><p>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>考虑到减轻服务器性能方面，应当使用COOKIE。</p></li><li><p>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p></li></ol><h2 id="一句话概括RESTFUL"><a href="#一句话概括RESTFUL" class="headerlink" title="一句话概括RESTFUL"></a>一句话概括RESTFUL</h2><p>用URL定位资源，用HTTP描述操作</p><h2 id="click在ios上有300ms延迟，原因及如何解决？"><a href="#click在ios上有300ms延迟，原因及如何解决？" class="headerlink" title="click在ios上有300ms延迟，原因及如何解决？"></a>click在ios上有300ms延迟，原因及如何解决？</h2><p>(1)粗暴型，禁用缩放</p><meta name="viewport" content="width=device-width, user-scalable=no"><p>(2)利用FastClick，其原理为：</p><p>检测到touchend事件后，立刻触发模拟click事件，并且把浏览器300ms之后真正触发的事件给阻断掉</p><h2 id="addEventListener参数"><a href="#addEventListener参数" class="headerlink" title="addEventListener参数"></a>addEventListener参数</h2><p><code>addEventListener(event, function, useCapture)</code></p><p>其中，event指定事件名; function指定事件触发时执行的函数；useCapture指定事件是否在捕获或冒泡阶段执行。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP协议 </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css中inline-block出现下移时的处理</title>
      <link href="2020/10/27/css%E4%B8%ADinline-block%E5%87%BA%E7%8E%B0%E4%B8%8B%E7%A7%BB%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>2020/10/27/css%E4%B8%ADinline-block%E5%87%BA%E7%8E%B0%E4%B8%8B%E7%A7%BB%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在包裹层里嵌套的两个div设置display: inline-block时，正常情况下两个div会并排显示，如图</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/27/FJXM6luvg9fRiWs.png" alt="13407043-a7bc40f94bbb543a.png"></p><p>代码：</p><p>html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>css:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.content1</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid blue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.content2</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid blue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是如果在其中一个div里面加上一些内容，神奇的事发生了，第一个div出现了下移，如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/27/ejwTr6uFRdPyWBN.png" alt="13407043-5d04c27cf4be0f8e.png"></p><p>这块我只在html代码加了p标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查阅了相关资料发现，在将元素display设置为inline-block的时候，元素即<strong>同时具有内联元素和块级元素的属性</strong>，既排列在同一行又可以设置宽高。</p><p>对于内联元素，都具有vertical-align属性，那这里就牵涉到vertical-align的默认对齐方式。 它的默认方式是baseline，基线对齐。基线指<strong>内容的下边缘</strong>(如图)</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/27/AmdQVit9sx6gC4B.png" alt="13407043-29c7907841cf9947.png"><br>第一个div里有元素，基线为元素也就是p元素的下边缘，第二个div内没有元素，默认的基线是<strong>margin下边缘</strong>，那么怎么解决这个问题，让div并排对齐？<strong>改变vertical-align默认对齐方式就可以了，在这里将其设置为top</strong>，效果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/27/2KyEMhA9wWfUGZJ.png" alt="13407043-07df54a0b25b05ed.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty——基本使用介绍</title>
      <link href="2020/10/14/Netty-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/10/14/Netty-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么选择Netty"><a href="#1-为什么选择Netty" class="headerlink" title="1.为什么选择Netty"></a><strong>1.为什么选择Netty</strong></h1><p>在了解了Socket通信（IO/NIO/AIO）编程之后，对于通信模型已经有了一个基本的认识。如果我们想把这些真正的用于实际工作中，那么还需要不断的完善、扩展和优化。比如经典的TCP读包写包问题，或者是数据接收的大小，实际的通信处理与应答的处理逻辑等等一些细节问题需要认真的去思考，而这些都需要大量的时间和经历，以及丰富的经验。所以想学好Socket通信不是件容易事，那么接下来就来学习一下新的技术Netty，为什么会选择Netty？因为它简单！使用Netty不必编写复杂的逻辑代码去实现通信，再也不需要去考虑性能问题，不需要考虑编码问题，半包读写等问题。强大的Netty已经帮我们实现好了，我们只需要使用即可。</p><p>Netty是最流行的NIO框架，它的健壮性、功能、性能、可定制性和可扩展性在同类框架都是首屈一指的。它已经得到成百上千的商业/商用项目验证，如Hadoop的RPC框架Avro、RocketMQ以及主流的分布式通信框架Dubbox等等。</p><h1 id="2-Netty简介"><a href="#2-Netty简介" class="headerlink" title="2.Netty简介"></a><strong>2.Netty简介</strong></h1><p>Netty是基于Java NIO  client-server的网络应用框架，使用Netty可以快速开发网络应用，例如服务器和客户端协议。Netty提供了一种新的方式来开发网络应用程序，这种新的方式使它很容易使用和具有很强的扩展性。Netty的内部实现是很复杂的，但是Netty提供了简单易用的API从网络处理代码中解耦业务逻辑。Netty是完全基于NIO实现的，所以整个Netty都是异步的。</p><p>网络应用程序通常需要有较高的可扩展性，无论是Netty还是其他的基于Java  Nio的框架，都会提供可扩展性的解决方案。Netty中一个关键组成部分是它的异步特性，本片文章将讨论同步（阻塞）和异步（非阻塞）的IO来说明为什么使用异步代码解决扩展性问题以及如何使用异步。</p><h1 id="3-Netty架构组成"><a href="#3-Netty架构组成" class="headerlink" title="3.Netty架构组成"></a><strong>3.Netty架构组成</strong></h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/1.png" alt="img"></p><p><a href="http://www.importnew.com/15656.html">Netty实现原理浅析</a>，写的很不错，感兴趣的可以看一下。</p><h1 id="4-Helloworld入门"><a href="#4-Helloworld入门" class="headerlink" title="4.Helloworld入门"></a><strong>4.Helloworld入门</strong></h1><p>在学习Netty之前，先来回顾一下NIO的通信步骤：</p><p>①创建ServerSocketChannel，为其配置非阻塞模式。</p><p>②绑定监听，配置TCP参数，录入backlog大小等。</p><p>③创建一个独立的IO线程，用于轮询多路复用器Selector。</p><p>④创建Selector，将之前创建的ServerSocketChannel注册到Selector上，并设置监听标识位SelectionKey.OP_ACCEPT。</p><p>⑤启动IO线程，在循环体中执行Selector.select()方法，轮询就绪的通道。</p><p>⑥当轮询到处于就绪状态的通道时，需要进行操作位判断，如果是ACCEPT状态，说明是新的客户端接入，则调用accept方法接收新的客户端。</p><p>⑦设置新接入客户端的一些参数，如非阻塞，并将其继续注册到Selector上，设置监听标识位等。</p><p>⑧如果轮询的通道标识位是READ，则进行读取，构造Buffer对象等。</p><p>⑨更细节的问题还有数据没发送完成继续发送的问题……</p><p>好啦，开始学习Netty了。先去<a href="http://netty.io/">官网</a>上下载所有的Netty包。</p><p>Netty通信的步骤：</p><p>①创建两个NIO线程组，一个专门用于网络事件处理（接受客户端的连接），另一个则进行网络通信的读写。</p><p>②创建一个ServerBootstrap对象，配置Netty的一系列参数，例如接受传出数据的缓存大小等。</p><p>③创建一个用于实际处理数据的类ChannelInitializer，进行初始化的准备工作，比如设置接受传出数据的字符集、格式以及实际处理数据的接口。</p><p>④绑定端口，执行同步阻塞方法等待服务器端启动即可。</p><p>强烈推荐读一读<a href="http://ifeve.com/netty5-user-guide/">Netty官方翻译文档</a>。</p><p>好了，说了那么多，下面就来HelloWorld入门吧！</p><p>服务器端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//用于处理服务器端接收客户端连接</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//进行网络通信（读写）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap(); <span class="comment">//辅助工具类，用于服务器通道的一系列配置</span></span><br><span class="line">            bootstrap.group(bossGroup, workerGroup) <span class="comment">//绑定两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">//指定NIO的模式</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123; <span class="comment">//配置具体的数据处理方式</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 对于ChannelOption.SO_BACKLOG的解释：</span></span><br><span class="line"><span class="comment">                     * 服务器端TCP内核维护有两个队列，我们称之为A、B队列。客户端向服务器端connect时，会发送带有SYN标志的包（第一次握手），服务器端</span></span><br><span class="line"><span class="comment">                     * 接收到客户端发送的SYN时，向客户端发送SYN ACK确认（第二次握手），此时TCP内核模块把客户端连接加入到A队列中，然后服务器接收到</span></span><br><span class="line"><span class="comment">                     * 客户端发送的ACK时（第三次握手），TCP内核模块把客户端连接从A队列移动到B队列，连接完成，应用程序的accept会返回。也就是说accept</span></span><br><span class="line"><span class="comment">                     * 从B队列中取出完成了三次握手的连接。</span></span><br><span class="line"><span class="comment">                     * A队列和B队列的长度之和就是backlog。当A、B队列的长度之和大于ChannelOption.SO_BACKLOG时，新的连接将会被TCP内核拒绝。</span></span><br><span class="line"><span class="comment">                     * 所以，如果backlog过小，可能会出现accept速度跟不上，A、B队列满了，导致新的客户端无法连接。要注意的是，backlog对程序支持的</span></span><br><span class="line"><span class="comment">                     * 连接数并无影响，backlog影响的只是还没有被accept取出的连接</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>) <span class="comment">//设置TCP缓冲区</span></span><br><span class="line">                    .option(ChannelOption.SO_SNDBUF, <span class="number">32</span> * <span class="number">1024</span>) <span class="comment">//设置发送数据缓冲大小</span></span><br><span class="line">                    .option(ChannelOption.SO_RCVBUF, <span class="number">32</span> * <span class="number">1024</span>) <span class="comment">//设置接受数据缓冲大小</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>); <span class="comment">//保持连接</span></span><br><span class="line">            ChannelFuture future = bootstrap.bind(port).sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Server(<span class="number">8379</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServerHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span>  <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do something msg</span></span><br><span class="line">ByteBuf buf = (ByteBuf)msg;</span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">buf.readBytes(data);</span><br><span class="line">String request = <span class="keyword">new</span> String(data, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Server: &quot;</span> + request);</span><br><span class="line"><span class="comment">//写给客户端</span></span><br><span class="line">String response = <span class="string">&quot;我是反馈的信息&quot;</span>;</span><br><span class="line">ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;888&quot;</span>.getBytes()));</span><br><span class="line"><span class="comment">//.addListener(ChannelFutureListener.CLOSE);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">cause.printStackTrace();</span><br><span class="line">ctx.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        bootstrap.group(workerGroup)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        socketChannel.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        ChannelFuture future = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8379</span>).sync();</span><br><span class="line">        future.channel().writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;777&quot;</span>.getBytes()));</span><br><span class="line">        future.channel().closeFuture().sync();</span><br><span class="line">        workerGroup.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ClientHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">            buf.readBytes(data);</span><br><span class="line">            System.out.println(<span class="string">&quot;Client：&quot;</span> + <span class="keyword">new</span> String(data).trim());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/2.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/3.png" alt="img"></p><h1 id="5-TCP粘包、拆包问题"><a href="#5-TCP粘包、拆包问题" class="headerlink" title="5.TCP粘包、拆包问题"></a><strong>5.TCP粘包、拆包问题</strong></h1><p>熟悉TCP编程的可能都知道，无论是服务器端还是客户端，当我们读取或者发送数据的时候，都需要考虑TCP底层的粘包/拆包机制。</p><p>TCP是一个“流”协议，所谓流就是没有界限的遗传数据。大家可以想象一下，如果河水就好比数据，他们是连成一片的，没有分界线，TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓冲区的具体情况进行包的划分，也就是说，在业务上一个完整的包可能会被TCP分成多个包进行发送，也可能把多个小包封装成一个大的数据包发送出去，这就是所谓的粘包/拆包问题。</p><p><strong>解决方案：</strong></p><p>①消息定长，例如每个报文的大小固定为200个字节，如果不够，空位补空格。</p><p>②在包尾部增加特殊字符进行分割，例如加回车等。</p><p>③将消息分为消息头和消息体，在消息头中包含表示消息总长度的字段，然后进行业务逻辑的处理。</p><p><strong>Netty中解决TCP粘包/拆包的方法：</strong></p><p>①分隔符类：DelimiterBasedFrameDecoder（自定义分隔符）</p><p>②定长：FixedLengthFrameDecoder</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/4.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/5.png" alt="img"></p><h1 id="6-Netty编解码技术"><a href="#6-Netty编解码技术" class="headerlink" title="6.Netty编解码技术"></a><strong>6.Netty编解码技术</strong></h1><p>通常我们也习惯将编码（Encode）成为序列化，它将数据序列化为字节数组，用于网络传输、数据持久化或者其他用途。反之，解码（Decode）/反序列化（deserialization）</p><p>把从网络、磁盘等读取的字节数组还原成原始对象（通常是原始对象的拷贝），以方便后续的业务逻辑操作。进行远程跨进程服务调用时（例如RPC调用），需要使用特定的编解码技术，对需要进行网络传输的对象做编码或者解码，以便完成远程调用。</p><p>主流的编解码框架：</p><p>①JBoss的Marshalling包</p><p>②google的Protobuf</p><p>③基于Protobuf的Kyro</p><p>④MessagePack框架</p><p>上代码，一读就懂，注意红色字体部分。</p><p>服务器端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup bossGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup workerGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ServerBootstrap bootstrap = newServerBootstrap();</span><br><span class="line"></span><br><span class="line">​       bootstrap.group(bossGroup, workerGroup)</span><br><span class="line"></span><br><span class="line">​          .channel(NioServerSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​          .handler(newLoggingHandler(LogLevel.INFO))</span><br><span class="line"></span><br><span class="line">​          .childHandler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​            <span class="function"><span class="keyword">protected</span> <span class="title">voidinitChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​               socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​              socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​              socketChannel.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​          &#125;)</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_BACKLOG,<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_RCVBUF, <span class="number">32</span> * <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_SNDBUF, <span class="number">32</span> * <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">​      ChannelFuture future = bootstrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line">​      future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      bossGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​      workerGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">new</span> Server(<span class="number">8765</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServerHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classServerHandler extends ChannelHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidexceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    cause.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    ctx.close();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContextctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​     Request request = (Request) msg;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;Server:&quot;</span>+ request.getId() + <span class="string">&quot;,&quot;</span> + request.getName() + <span class="string">&quot;,&quot;</span> +request.getReqeustMessag());</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    Response response = <span class="keyword">new</span> Response();</span><br><span class="line"></span><br><span class="line">​    response.setId(request.getId());</span><br><span class="line"></span><br><span class="line">​    response.setName(<span class="string">&quot;response &quot;</span>+ request.getId());</span><br><span class="line"></span><br><span class="line">​    response.setResponseMessage(<span class="string">&quot;响应内容：&quot;</span> +request.getReqeustMessag());</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">byte</span>[] unGizpData =GzipUtils.unGzip(request.getAttachment());</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">char</span> separator = File.separatorChar;</span><br><span class="line"></span><br><span class="line">​     FileOutputStream outputStream =  newFileOutputStream(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + separator  +<span class="string">&quot;recieve&quot;</span> + separator + <span class="string">&quot;1.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    outputStream.write(unGizpData);</span><br><span class="line"></span><br><span class="line">​    outputStream.flush();</span><br><span class="line"></span><br><span class="line">​    outputStream.close();</span><br><span class="line"></span><br><span class="line">​     ctx.writeAndFlush(response);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup workerGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"></span><br><span class="line">​      bootstrap.group(workerGroup)</span><br><span class="line"></span><br><span class="line">​          .handler(newLoggingHandler(LogLevel.INFO))</span><br><span class="line"></span><br><span class="line">​          .channel(NioSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​          .handler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​            <span class="function"><span class="keyword">protected</span> <span class="title">voidinitChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​               socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​              socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​              socketChannel.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​          &#125;);</span><br><span class="line"></span><br><span class="line">​      ChannelFuture future =bootstrap.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.01&quot;</span>, <span class="number">8765</span>)).sync();</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">​        Request request = newRequest();</span><br><span class="line"></span><br><span class="line">​        request.setId(i);</span><br><span class="line"></span><br><span class="line">​        request.setName(<span class="string">&quot;pro&quot;</span>+ i);</span><br><span class="line"></span><br><span class="line">​        request.setReqeustMessag(<span class="string">&quot;数据信息&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">​        <span class="comment">//传输图片</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">char</span> separator =File.separatorChar;</span><br><span class="line"></span><br><span class="line">​        File file = newFile(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + separator + <span class="string">&quot;source&quot;</span>+ separator + <span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        FileInputStream inputStream = newFileInputStream(file);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">byte</span>[] data = newbyte[inputStream.available()];</span><br><span class="line"></span><br><span class="line">​        inputStream.read(data);</span><br><span class="line"></span><br><span class="line">​        inputStream.close();</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">byte</span>[] gzipData =GzipUtils.gzip(data);</span><br><span class="line"></span><br><span class="line">​        request.setAttachment(gzipData);</span><br><span class="line"></span><br><span class="line">​        future.channel().writeAndFlush(request);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​      future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      workerGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClientHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classClientHandler extends ChannelHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidexceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​     Response response = (Response) msg;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;Client:&quot;</span>+ response.getId() + <span class="string">&quot;,&quot;</span> + response.getName() + <span class="string">&quot;,&quot;</span> +response.getResponseMessage());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Marshalling工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> classMarshallingCodeCFactory &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   \* 创建Jboss Marshalling解码器MarshallingDecoder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   \* <span class="doctag">@return</span> MarshallingDecoder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">MarshallingDecoderbuildMarshallingDecoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//首先通过Marshalling工具类的精通方法获取Marshalling实例对象 参数serial标识创建的是java序列化工厂对象。</span></span><br><span class="line"></span><br><span class="line">​         <span class="keyword">final</span> MarshallerFactorymarshallerFactory =Marshalling.getProvidedMarshallerFactory(<span class="string">&quot;serial&quot;</span>);</span><br><span class="line"></span><br><span class="line">​         <span class="comment">//创建了MarshallingConfiguration对象，配置了版本号为5</span></span><br><span class="line"></span><br><span class="line">​         <span class="keyword">final</span> MarshallingConfigurationconfiguration = <span class="keyword">new</span> MarshallingConfiguration();</span><br><span class="line"></span><br><span class="line">​         configuration.setVersion(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">​         <span class="comment">//根据marshallerFactory和configuration创建provider</span></span><br><span class="line"></span><br><span class="line">​         UnmarshallerProvider provider= <span class="keyword">new</span> DefaultUnmarshallerProvider(marshallerFactory, configuration);</span><br><span class="line"></span><br><span class="line">​         <span class="comment">//构建Netty的MarshallingDecoder对象，俩个参数分别为provider和单个消息序列化后的最大长度</span></span><br><span class="line"></span><br><span class="line">​         MarshallingDecoder decoder =<span class="keyword">new</span> MarshallingDecoder(provider, <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> decoder;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   \* 创建Jboss Marshalling编码器MarshallingEncoder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   \* <span class="doctag">@return</span> MarshallingEncoder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">MarshallingEncoderbuildMarshallingEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">final</span> MarshallerFactorymarshallerFactory =Marshalling.getProvidedMarshallerFactory(<span class="string">&quot;serial&quot;</span>);</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">final</span> MarshallingConfigurationconfiguration = <span class="keyword">new</span> MarshallingConfiguration();</span><br><span class="line"></span><br><span class="line">​         configuration.setVersion(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">​         MarshallerProvider provider =<span class="keyword">new</span> DefaultMarshallerProvider(marshallerFactory, configuration);</span><br><span class="line"></span><br><span class="line">​         <span class="comment">//构建Netty的MarshallingEncoder对象，MarshallingEncoder用于实现序列化接口的POJO对象序列化为二进制数组</span></span><br><span class="line"></span><br><span class="line">​         MarshallingEncoder encoder =<span class="keyword">new</span> MarshallingEncoder(provider);</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> encoder;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gizp压缩与解压缩工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classGzipUtils &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] gzip(<span class="keyword">byte</span>[] val)<span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">​    ByteArrayOutputStream bos = newByteArrayOutputStream(val.length);</span><br><span class="line"></span><br><span class="line">​    GZIPOutputStream gos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      gos = <span class="keyword">new</span> GZIPOutputStream(bos);</span><br><span class="line"></span><br><span class="line">​      gos.write(val, <span class="number">0</span>, val.length);</span><br><span class="line"></span><br><span class="line">​      gos.finish();</span><br><span class="line"></span><br><span class="line">​      gos.flush();</span><br><span class="line"></span><br><span class="line">​      bos.flush();</span><br><span class="line"></span><br><span class="line">​      val = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (gos != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​        gos.close();</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (bos != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​        bos.close();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> val;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] unGzip(<span class="keyword">byte</span>[] buf)<span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">​    GZIPInputStream gzi = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​    ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      gzi = <span class="keyword">new</span> GZIPInputStream(newByteArrayInputStream(buf));</span><br><span class="line"></span><br><span class="line">​      bos = newByteArrayOutputStream(buf.length);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">byte</span>[] tmp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">while</span> ((count = gzi.read(tmp)) !=-<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">​        bos.write(tmp, <span class="number">0</span>, count);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​       buf = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​        bos.flush();</span><br><span class="line"></span><br><span class="line">​        bos.close();</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (gzi != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​        gzi.close();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> buf;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7.最佳实践"></a><strong>7.最佳实践</strong></h1><h2 id="（1）数据通信"><a href="#（1）数据通信" class="headerlink" title="（1）数据通信"></a><strong>（1）数据通信</strong></h2><p>我们需要了解在真正项目中如何使用Netty，大体上对于一些参数设置都是根据服务器性能决定的。我们需要考虑的问题是两台机器（甚至多台）使用Netty怎样进行通信。</p><p>大体上分为三种：<br>    ①使用长连接通道不断开的形式进行通信，也就是服务器和客户端的通道一直处于开启状态，如果服务器性能足够好，并且客户端数量也比较上的情况下，推荐这种方式。<br>    ②一次性批量提交数据，采用短连接方式。也就是说先把数据保存到本地临时缓存区或者临时表，当达到界值时进行一次性批量提交，又或者根据定时任务轮询提交，</p><p>这种情况的弊端是做不到实时性传输，对实时性要求不高的应用程序中推荐使用。<br>    ③使用一种特殊的长连接，在某一指定时间段内，服务器与某台客户端没有任何通信，则断开连接。下次连接则是客户端向服务器发送请求的时候，再次建立连接。<br>    在这里将介绍使用Netty实现第三种方式的连接，但是我们需要考虑两个因素：<br>    ①如何在超时（即服务器和客户端没有任何通信）后关闭通道？关闭通道后又如何再次建立连接？<br>    ②客户端宕机时，我们无需考虑，下次重启客户端之后就可以与服务器建立连接，但服务器宕机时，客户端如何与服务器端通信？</p><p>服务器端：增加了红色框部分</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/6.png" alt="img"></p><p>客户端（注意红色字体部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHodler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">static</span> <span class="keyword">final</span> Client client = newClient();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> SingleHodler.client;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> EventLoopGroup workerGroup;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Bootstrap bootstrap;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ChannelFuture future;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Client</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"></span><br><span class="line">​    bootstrap.group(workerGroup)</span><br><span class="line"></span><br><span class="line">​        .channel(NioSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​        .handler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​          <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​          <span class="function"><span class="keyword">protected</span> <span class="title">voidinitChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​            socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​            socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​             socketChannel.pipeline().addLast(newReadTimeoutHandler(<span class="number">5</span>)); <span class="comment">//5秒后未与服务器通信，则断开连接。</span></span><br><span class="line"></span><br><span class="line">​            socketChannel.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line"></span><br><span class="line">​          &#125;</span><br><span class="line"></span><br><span class="line">​        &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      future =bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8765</span>).sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">getFuture</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(future == <span class="keyword">null</span> ||!future.channel().isActive()) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">this</span>.connect();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> future;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">​    Client client = getInstance();</span><br><span class="line"></span><br><span class="line">​    ChannelFuture future = client.getFuture();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">​      Message message = <span class="keyword">new</span> Message(i,<span class="string">&quot;pro&quot;</span> + i, <span class="string">&quot;数据信息&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">​      future.channel().writeAndFlush(message);</span><br><span class="line"></span><br><span class="line">​      Thread.sleep(<span class="number">4000</span>); <span class="comment">//休眠4秒后再发送数据</span></span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;子线程开始....&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        ChannelFuture f =client.getFuture();</span><br><span class="line"></span><br><span class="line">​        Message message = newMessage(<span class="number">4</span>, <span class="string">&quot;pro&quot;</span> + <span class="number">4</span>, <span class="string">&quot;数据信息&quot;</span> + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">​         f.channel().writeAndFlush(message);</span><br><span class="line"></span><br><span class="line">​        f.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;).start();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;主线程退出......&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的类与之前的一样，没有变化。</p><p>运行结果：</p><p>**<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/7.png" alt="img"><br>** </p><p>**<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/8.png" alt="img"><br>** </p><h2 id="（2）心跳检测"><a href="#（2）心跳检测" class="headerlink" title="（2）心跳检测"></a><strong>（2）心跳检测</strong></h2><p>我们使用Socket通信一般经常会处理多个服务器之间的心跳检测，一般来讲我们去维护服务器集群，肯定要有一台或多台服务器主机（Master），然后还应该有N台（Slave），那么我们的主机肯定要时时刻刻知道自己下面的从服务器的各方面情况，然后进行实时监控的功能。这个在分布式架构里交做心跳检测或者心跳监控。最佳处理方案是使用一些通信框架进行实现，Netty就可以做这样的事。</p><p>这个例子需要使用Sigar，不熟悉的可以看<a href="http://364434006.iteye.com/blog/1747490">这篇文章</a>。</p><p>Server</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup bossGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup workerGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ServerBootstrap bootstrap = newServerBootstrap();</span><br><span class="line"></span><br><span class="line">​      bootstrap.group(bossGroup,workerGroup)</span><br><span class="line"></span><br><span class="line">​          .channel(NioServerSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​          .childHandler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​            <span class="function"><span class="keyword">protected</span> <span class="title">voidinitChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(<span class="keyword">new</span> ServerHeartBeatHandler());</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​          &#125;)</span><br><span class="line"></span><br><span class="line">​          .handler(newLoggingHandler(LogLevel.INFO))</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">​      ChannelFuture future =bootstrap.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, port)).sync();</span><br><span class="line"></span><br><span class="line">​      future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​       e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      bossGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​      workerGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">new</span> Server(<span class="number">8765</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServerHeartBeatHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classServerHeartBeatHandler extends ChannelHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt;AUTH_IP_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS_KEY =<span class="string">&quot;auth_success_key&quot;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">​    AUTH_IP_MAP.put(<span class="string">&quot;192.168.3.176&quot;</span>,<span class="string">&quot;1234&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">auth</span><span class="params">(ChannelHandlerContextctx, Object msg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    String[] rets = ((String)msg).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    String auth = AUTH_IP_MAP.get(rets[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(auth != <span class="keyword">null</span> &amp;&amp;auth.equals(rets[<span class="number">1</span>])) &#123;</span><br><span class="line"></span><br><span class="line">​      ctx.writeAndFlush(SUCCESS_KEY);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ctx.writeAndFlush(<span class="string">&quot;authfailure!&quot;</span>).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContextctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"></span><br><span class="line">​      auth(ctx, msg);</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> RequestInfo) &#123;</span><br><span class="line"></span><br><span class="line">​      RequestInfo info = (RequestInfo)msg;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前主机ip：&quot;</span> +info.getIp());</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前主机cpu：情况&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      Map&lt;String, Object&gt; cpuMap =info.getCpuPercMap();</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;总使用率：&quot;</span> + cpuMap.get(<span class="string">&quot;combined&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;用户使用率：&quot;</span> +cpuMap.get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;系统使用率：&quot;</span> +cpuMap.get(<span class="string">&quot;sys&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;等待率：&quot;</span> +cpuMap.get(<span class="string">&quot;wait&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;空闲率：&quot;</span> +cpuMap.get(<span class="string">&quot;idle&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前主机memory情况：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      Map&lt;String, Object&gt; memMap =info.getMemoryMap();</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;内存总量：&quot;</span> +memMap.get(<span class="string">&quot;total&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前内存使用量：&quot;</span> +memMap.get(<span class="string">&quot;used&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前内存剩余量：&quot;</span> +memMap.get(<span class="string">&quot;free&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;-----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      ctx.writeAndFlush(<span class="string">&quot;inforeceived!&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ctx.writeAndFlush(<span class="string">&quot;connectfailure&quot;</span>).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup workerGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      Bootstrap bootstrap = newBootstrap();</span><br><span class="line"></span><br><span class="line">​      bootstrap.group(workerGroup)</span><br><span class="line"></span><br><span class="line">​          .channel(NioSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​          .handler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannelsc)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(<span class="keyword">new</span> ClientHeartBeatHandler());</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​          &#125;);</span><br><span class="line"></span><br><span class="line">​      ChannelFuture future =bootstrap.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8765</span>)).sync();</span><br><span class="line"></span><br><span class="line">​      future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      workerGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClientHeartBeatHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classClientHeartBeatHandler extends ChannelHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ScheduledExecutorService scheduled= Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ScheduledFuture&lt;?&gt; heartBeat;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> InetAddress address;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS_KEY =<span class="string">&quot;auth_success_key&quot;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    address = InetAddress.getLocalHost();</span><br><span class="line"></span><br><span class="line">​    String ip = address.getHostAddress();</span><br><span class="line"></span><br><span class="line">​    String key = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"></span><br><span class="line">​    String auth = ip + <span class="string">&quot;,&quot;</span> + key;</span><br><span class="line"></span><br><span class="line">​    ctx.writeAndFlush(auth);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidexceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    cause.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(heartBeat != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​      heartBeat.cancel(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">​      heartBeat = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    ctx.fireExceptionCaught(cause);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"></span><br><span class="line">​        String data = (String) msg;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span>(SUCCESS_KEY.equals(data)) &#123;</span><br><span class="line"></span><br><span class="line">​          heartBeat =scheduled.scheduleWithFixedDelay(<span class="keyword">new</span> HeartBeatTask(ctx), <span class="number">0</span>, <span class="number">5</span>,TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">​          System.out.println(msg);</span><br><span class="line"></span><br><span class="line">​        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​          System.out.println(msg);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ReferenceCountUtil.release(msg);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeatTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandlerContextctx;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    publicHeartBeatTask(ChannelHandlerContext ctx) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">this</span>.ctx = ctx;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​        RequestInfo requestInfo = newRequestInfo();</span><br><span class="line"></span><br><span class="line">​        requestInfo.setIp(address.getHostAddress());</span><br><span class="line"></span><br><span class="line">​        Sigar sigar = <span class="keyword">new</span> Sigar();</span><br><span class="line"></span><br><span class="line">​        CpuPerc cpuPerc =sigar.getCpuPerc();</span><br><span class="line"></span><br><span class="line">​        Map&lt;String, Object&gt;cpuPercMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">​         cpuPercMap.put(<span class="string">&quot;combined&quot;</span>,cpuPerc.getCombined());</span><br><span class="line"></span><br><span class="line">​        cpuPercMap.put(<span class="string">&quot;user&quot;</span>, cpuPerc.getUser());</span><br><span class="line"></span><br><span class="line">​        cpuPercMap.put(<span class="string">&quot;sys&quot;</span>,cpuPerc.getSys());</span><br><span class="line"></span><br><span class="line">​        cpuPercMap.put(<span class="string">&quot;wait&quot;</span>, cpuPerc.getWait());</span><br><span class="line"></span><br><span class="line">​        cpuPercMap.put(<span class="string">&quot;idle&quot;</span>,cpuPerc.getIdle());</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​        Mem mem = sigar.getMem();</span><br><span class="line"></span><br><span class="line">​        Map&lt;String, Object&gt;memoryMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">​        memoryMap.put(<span class="string">&quot;total&quot;</span>, mem.getTotal() / (<span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line">​        memoryMap.put(<span class="string">&quot;used&quot;</span>,mem.getUsed() / (<span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line">​        memoryMap.put(<span class="string">&quot;free&quot;</span>,mem.getFree() / (<span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​        requestInfo.setCpuPercMap(cpuPercMap);</span><br><span class="line"></span><br><span class="line">​        requestInfo.setMemoryMap(memoryMap);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​        ctx.writeAndFlush(requestInfo);</span><br><span class="line"></span><br><span class="line">​      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RequestInfo类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classRequestInfo implements Serializable &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">private</span> String ip ;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">private</span> Map&lt;String, Object&gt;cpuPercMap ;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">private</span> Map&lt;String, Object&gt;memoryMap;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//.. other field</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> ip;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">this</span>.ip = ip;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> Map&lt;String, Object&gt;getCpuPercMap() &#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> cpuPercMap;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="function"><span class="keyword">public</span> <span class="title">voidsetCpuPercMap</span><span class="params">(Map&lt;String, Object&gt; cpuPercMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">this</span>.cpuPercMap = cpuPercMap;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> Map&lt;String, Object&gt;getMemoryMap() &#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> memoryMap;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemoryMap</span><span class="params">(Map&lt;String,Object&gt; memoryMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">this</span>.memoryMap = memoryMap;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MarshallingCodeCFactory类就不贴出来了，跟之前的一样。</p><p>运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/9.png" alt="img"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/csh1314/CDN@1.0/images/netty/10.png" alt="img"></p><p>每5秒发送一次数据到服务器端，这样主服务器就可以知道每台从服务器的状态了。当然，这只是一个简单的小例子，真实环境中肯定需要更严格的校验。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="2020/09/28/my-first-blog/"/>
      <url>2020/09/28/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo部分命令"><a href="#hexo部分命令" class="headerlink" title="hexo部分命令"></a>hexo部分命令</h2><p>hexo n “博客大标题”<br>hexo clean  清理缓存<br>hexo g  更新全局<br>hexo s  本地启动</p><h2 id="hexo-d-远端部署（github"><a href="#hexo-d-远端部署（github" class="headerlink" title="hexo d  远端部署（github)"></a>hexo d  远端部署（github)</h2><h2 id="在命令窗口下操作"><a href="#在命令窗口下操作" class="headerlink" title="在命令窗口下操作"></a>在命令窗口下操作</h2><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
