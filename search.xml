<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Netty——基本使用介绍</title>
      <link href="2020/10/14/Netty-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/10/14/Netty-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么选择Netty"><a href="#1-为什么选择Netty" class="headerlink" title="1.为什么选择Netty"></a><strong>1.为什么选择Netty</strong></h1><p>在了解了Socket通信（IO/NIO/AIO）编程之后，对于通信模型已经有了一个基本的认识。如果我们想把这些真正的用于实际工作中，那么还需要不断的完善、扩展和优化。比如经典的TCP读包写包问题，或者是数据接收的大小，实际的通信处理与应答的处理逻辑等等一些细节问题需要认真的去思考，而这些都需要大量的时间和经历，以及丰富的经验。所以想学好Socket通信不是件容易事，那么接下来就来学习一下新的技术Netty，为什么会选择Netty？因为它简单！使用Netty不必编写复杂的逻辑代码去实现通信，再也不需要去考虑性能问题，不需要考虑编码问题，半包读写等问题。强大的Netty已经帮我们实现好了，我们只需要使用即可。</p><p>Netty是最流行的NIO框架，它的健壮性、功能、性能、可定制性和可扩展性在同类框架都是首屈一指的。它已经得到成百上千的商业/商用项目验证，如Hadoop的RPC框架Avro、RocketMQ以及主流的分布式通信框架Dubbox等等。</p><h1 id="2-Netty简介"><a href="#2-Netty简介" class="headerlink" title="2.Netty简介"></a><strong>2.Netty简介</strong></h1><p>Netty是基于Java NIO  client-server的网络应用框架，使用Netty可以快速开发网络应用，例如服务器和客户端协议。Netty提供了一种新的方式来开发网络应用程序，这种新的方式使它很容易使用和具有很强的扩展性。Netty的内部实现是很复杂的，但是Netty提供了简单易用的API从网络处理代码中解耦业务逻辑。Netty是完全基于NIO实现的，所以整个Netty都是异步的。</p><p>网络应用程序通常需要有较高的可扩展性，无论是Netty还是其他的基于Java  Nio的框架，都会提供可扩展性的解决方案。Netty中一个关键组成部分是它的异步特性，本片文章将讨论同步（阻塞）和异步（非阻塞）的IO来说明为什么使用异步代码解决扩展性问题以及如何使用异步。</p><h1 id="3-Netty架构组成"><a href="#3-Netty架构组成" class="headerlink" title="3.Netty架构组成"></a><strong>3.Netty架构组成</strong></h1><p><img src= "/img/loading.gif" data-lazy-src="img/1.png" alt="img"></p><p><a href="http://www.importnew.com/15656.html">Netty实现原理浅析</a>，写的很不错，感兴趣的可以看一下。</p><h1 id="4-Helloworld入门"><a href="#4-Helloworld入门" class="headerlink" title="4.Helloworld入门"></a><strong>4.Helloworld入门</strong></h1><p>在学习Netty之前，先来回顾一下NIO的通信步骤：</p><p>①创建ServerSocketChannel，为其配置非阻塞模式。</p><p>②绑定监听，配置TCP参数，录入backlog大小等。</p><p>③创建一个独立的IO线程，用于轮询多路复用器Selector。</p><p>④创建Selector，将之前创建的ServerSocketChannel注册到Selector上，并设置监听标识位SelectionKey.OP_ACCEPT。</p><p>⑤启动IO线程，在循环体中执行Selector.select()方法，轮询就绪的通道。</p><p>⑥当轮询到处于就绪状态的通道时，需要进行操作位判断，如果是ACCEPT状态，说明是新的客户端接入，则调用accept方法接收新的客户端。</p><p>⑦设置新接入客户端的一些参数，如非阻塞，并将其继续注册到Selector上，设置监听标识位等。</p><p>⑧如果轮询的通道标识位是READ，则进行读取，构造Buffer对象等。</p><p>⑨更细节的问题还有数据没发送完成继续发送的问题……</p><p>好啦，开始学习Netty了。先去<a href="http://netty.io/">官网</a>上下载所有的Netty包。</p><p>Netty通信的步骤：</p><p>①创建两个NIO线程组，一个专门用于网络事件处理（接受客户端的连接），另一个则进行网络通信的读写。</p><p>②创建一个ServerBootstrap对象，配置Netty的一系列参数，例如接受传出数据的缓存大小等。</p><p>③创建一个用于实际处理数据的类ChannelInitializer，进行初始化的准备工作，比如设置接受传出数据的字符集、格式以及实际处理数据的接口。</p><p>④绑定端口，执行同步阻塞方法等待服务器端启动即可。</p><p>强烈推荐读一读<a href="http://ifeve.com/netty5-user-guide/">Netty官方翻译文档</a>。</p><p>好了，说了那么多，下面就来HelloWorld入门吧！</p><p>服务器端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//用于处理服务器端接收客户端连接</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//进行网络通信（读写）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap(); <span class="comment">//辅助工具类，用于服务器通道的一系列配置</span></span><br><span class="line">            bootstrap.group(bossGroup, workerGroup) <span class="comment">//绑定两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">//指定NIO的模式</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123; <span class="comment">//配置具体的数据处理方式</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 对于ChannelOption.SO_BACKLOG的解释：</span></span><br><span class="line"><span class="comment">                     * 服务器端TCP内核维护有两个队列，我们称之为A、B队列。客户端向服务器端connect时，会发送带有SYN标志的包（第一次握手），服务器端</span></span><br><span class="line"><span class="comment">                     * 接收到客户端发送的SYN时，向客户端发送SYN ACK确认（第二次握手），此时TCP内核模块把客户端连接加入到A队列中，然后服务器接收到</span></span><br><span class="line"><span class="comment">                     * 客户端发送的ACK时（第三次握手），TCP内核模块把客户端连接从A队列移动到B队列，连接完成，应用程序的accept会返回。也就是说accept</span></span><br><span class="line"><span class="comment">                     * 从B队列中取出完成了三次握手的连接。</span></span><br><span class="line"><span class="comment">                     * A队列和B队列的长度之和就是backlog。当A、B队列的长度之和大于ChannelOption.SO_BACKLOG时，新的连接将会被TCP内核拒绝。</span></span><br><span class="line"><span class="comment">                     * 所以，如果backlog过小，可能会出现accept速度跟不上，A、B队列满了，导致新的客户端无法连接。要注意的是，backlog对程序支持的</span></span><br><span class="line"><span class="comment">                     * 连接数并无影响，backlog影响的只是还没有被accept取出的连接</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>) <span class="comment">//设置TCP缓冲区</span></span><br><span class="line">                    .option(ChannelOption.SO_SNDBUF, <span class="number">32</span> * <span class="number">1024</span>) <span class="comment">//设置发送数据缓冲大小</span></span><br><span class="line">                    .option(ChannelOption.SO_RCVBUF, <span class="number">32</span> * <span class="number">1024</span>) <span class="comment">//设置接受数据缓冲大小</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>); <span class="comment">//保持连接</span></span><br><span class="line">            ChannelFuture future = bootstrap.bind(port).sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Server(<span class="number">8379</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServerHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span>  <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do something msg</span></span><br><span class="line">ByteBuf buf = (ByteBuf)msg;</span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">buf.readBytes(data);</span><br><span class="line">String request = <span class="keyword">new</span> String(data, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Server: &quot;</span> + request);</span><br><span class="line"><span class="comment">//写给客户端</span></span><br><span class="line">String response = <span class="string">&quot;我是反馈的信息&quot;</span>;</span><br><span class="line">ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;888&quot;</span>.getBytes()));</span><br><span class="line"><span class="comment">//.addListener(ChannelFutureListener.CLOSE);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">cause.printStackTrace();</span><br><span class="line">ctx.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        bootstrap.group(workerGroup)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        socketChannel.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        ChannelFuture future = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8379</span>).sync();</span><br><span class="line">        future.channel().writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;777&quot;</span>.getBytes()));</span><br><span class="line">        future.channel().closeFuture().sync();</span><br><span class="line">        workerGroup.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ClientHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">            buf.readBytes(data);</span><br><span class="line">            System.out.println(<span class="string">&quot;Client：&quot;</span> + <span class="keyword">new</span> String(data).trim());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="img/2.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="img/3.png" alt="img"></p><h1 id="5-TCP粘包、拆包问题"><a href="#5-TCP粘包、拆包问题" class="headerlink" title="5.TCP粘包、拆包问题"></a><strong>5.TCP粘包、拆包问题</strong></h1><p>熟悉TCP编程的可能都知道，无论是服务器端还是客户端，当我们读取或者发送数据的时候，都需要考虑TCP底层的粘包/拆包机制。</p><p>TCP是一个“流”协议，所谓流就是没有界限的遗传数据。大家可以想象一下，如果河水就好比数据，他们是连成一片的，没有分界线，TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓冲区的具体情况进行包的划分，也就是说，在业务上一个完整的包可能会被TCP分成多个包进行发送，也可能把多个小包封装成一个大的数据包发送出去，这就是所谓的粘包/拆包问题。</p><p><strong>解决方案：</strong></p><p>①消息定长，例如每个报文的大小固定为200个字节，如果不够，空位补空格。</p><p>②在包尾部增加特殊字符进行分割，例如加回车等。</p><p>③将消息分为消息头和消息体，在消息头中包含表示消息总长度的字段，然后进行业务逻辑的处理。</p><p><strong>Netty中解决TCP粘包/拆包的方法：</strong></p><p>①分隔符类：DelimiterBasedFrameDecoder（自定义分隔符）</p><p>②定长：FixedLengthFrameDecoder</p><p><img src= "/img/loading.gif" data-lazy-src="img/4.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="img/5.png" alt="img"></p><h1 id="6-Netty编解码技术"><a href="#6-Netty编解码技术" class="headerlink" title="6.Netty编解码技术"></a><strong>6.Netty编解码技术</strong></h1><p>通常我们也习惯将编码（Encode）成为序列化，它将数据序列化为字节数组，用于网络传输、数据持久化或者其他用途。反之，解码（Decode）/反序列化（deserialization）</p><p>把从网络、磁盘等读取的字节数组还原成原始对象（通常是原始对象的拷贝），以方便后续的业务逻辑操作。进行远程跨进程服务调用时（例如RPC调用），需要使用特定的编解码技术，对需要进行网络传输的对象做编码或者解码，以便完成远程调用。</p><p>主流的编解码框架：</p><p>①JBoss的Marshalling包</p><p>②google的Protobuf</p><p>③基于Protobuf的Kyro</p><p>④MessagePack框架</p><p>上代码，一读就懂，注意红色字体部分。</p><p>服务器端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup bossGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup workerGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ServerBootstrap bootstrap = newServerBootstrap();</span><br><span class="line"></span><br><span class="line">​       bootstrap.group(bossGroup, workerGroup)</span><br><span class="line"></span><br><span class="line">​          .channel(NioServerSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​          .handler(newLoggingHandler(LogLevel.INFO))</span><br><span class="line"></span><br><span class="line">​          .childHandler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​            <span class="function"><span class="keyword">protected</span> <span class="title">voidinitChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​               socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​              socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​              socketChannel.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​          &#125;)</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_BACKLOG,<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_RCVBUF, <span class="number">32</span> * <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_SNDBUF, <span class="number">32</span> * <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">​      ChannelFuture future = bootstrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line">​      future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      bossGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​      workerGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">new</span> Server(<span class="number">8765</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServerHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classServerHandler extends ChannelHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidexceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    cause.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    ctx.close();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContextctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​     Request request = (Request) msg;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;Server:&quot;</span>+ request.getId() + <span class="string">&quot;,&quot;</span> + request.getName() + <span class="string">&quot;,&quot;</span> +request.getReqeustMessag());</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    Response response = <span class="keyword">new</span> Response();</span><br><span class="line"></span><br><span class="line">​    response.setId(request.getId());</span><br><span class="line"></span><br><span class="line">​    response.setName(<span class="string">&quot;response &quot;</span>+ request.getId());</span><br><span class="line"></span><br><span class="line">​    response.setResponseMessage(<span class="string">&quot;响应内容：&quot;</span> +request.getReqeustMessag());</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">byte</span>[] unGizpData =GzipUtils.unGzip(request.getAttachment());</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">char</span> separator = File.separatorChar;</span><br><span class="line"></span><br><span class="line">​     FileOutputStream outputStream =  newFileOutputStream(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + separator  +<span class="string">&quot;recieve&quot;</span> + separator + <span class="string">&quot;1.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    outputStream.write(unGizpData);</span><br><span class="line"></span><br><span class="line">​    outputStream.flush();</span><br><span class="line"></span><br><span class="line">​    outputStream.close();</span><br><span class="line"></span><br><span class="line">​     ctx.writeAndFlush(response);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup workerGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"></span><br><span class="line">​      bootstrap.group(workerGroup)</span><br><span class="line"></span><br><span class="line">​          .handler(newLoggingHandler(LogLevel.INFO))</span><br><span class="line"></span><br><span class="line">​          .channel(NioSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​          .handler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​            <span class="function"><span class="keyword">protected</span> <span class="title">voidinitChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​               socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​              socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​              socketChannel.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​          &#125;);</span><br><span class="line"></span><br><span class="line">​      ChannelFuture future =bootstrap.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.01&quot;</span>, <span class="number">8765</span>)).sync();</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">​        Request request = newRequest();</span><br><span class="line"></span><br><span class="line">​        request.setId(i);</span><br><span class="line"></span><br><span class="line">​        request.setName(<span class="string">&quot;pro&quot;</span>+ i);</span><br><span class="line"></span><br><span class="line">​        request.setReqeustMessag(<span class="string">&quot;数据信息&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">​        <span class="comment">//传输图片</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">char</span> separator =File.separatorChar;</span><br><span class="line"></span><br><span class="line">​        File file = newFile(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + separator + <span class="string">&quot;source&quot;</span>+ separator + <span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        FileInputStream inputStream = newFileInputStream(file);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">byte</span>[] data = newbyte[inputStream.available()];</span><br><span class="line"></span><br><span class="line">​        inputStream.read(data);</span><br><span class="line"></span><br><span class="line">​        inputStream.close();</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">byte</span>[] gzipData =GzipUtils.gzip(data);</span><br><span class="line"></span><br><span class="line">​        request.setAttachment(gzipData);</span><br><span class="line"></span><br><span class="line">​        future.channel().writeAndFlush(request);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​      future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      workerGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClientHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classClientHandler extends ChannelHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidexceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​     Response response = (Response) msg;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;Client:&quot;</span>+ response.getId() + <span class="string">&quot;,&quot;</span> + response.getName() + <span class="string">&quot;,&quot;</span> +response.getResponseMessage());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Marshalling工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> classMarshallingCodeCFactory &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   \* 创建Jboss Marshalling解码器MarshallingDecoder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   \* <span class="doctag">@return</span> MarshallingDecoder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">MarshallingDecoderbuildMarshallingDecoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//首先通过Marshalling工具类的精通方法获取Marshalling实例对象 参数serial标识创建的是java序列化工厂对象。</span></span><br><span class="line"></span><br><span class="line">​         <span class="keyword">final</span> MarshallerFactorymarshallerFactory =Marshalling.getProvidedMarshallerFactory(<span class="string">&quot;serial&quot;</span>);</span><br><span class="line"></span><br><span class="line">​         <span class="comment">//创建了MarshallingConfiguration对象，配置了版本号为5</span></span><br><span class="line"></span><br><span class="line">​         <span class="keyword">final</span> MarshallingConfigurationconfiguration = <span class="keyword">new</span> MarshallingConfiguration();</span><br><span class="line"></span><br><span class="line">​         configuration.setVersion(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">​         <span class="comment">//根据marshallerFactory和configuration创建provider</span></span><br><span class="line"></span><br><span class="line">​         UnmarshallerProvider provider= <span class="keyword">new</span> DefaultUnmarshallerProvider(marshallerFactory, configuration);</span><br><span class="line"></span><br><span class="line">​         <span class="comment">//构建Netty的MarshallingDecoder对象，俩个参数分别为provider和单个消息序列化后的最大长度</span></span><br><span class="line"></span><br><span class="line">​         MarshallingDecoder decoder =<span class="keyword">new</span> MarshallingDecoder(provider, <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> decoder;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   \* 创建Jboss Marshalling编码器MarshallingEncoder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   \* <span class="doctag">@return</span> MarshallingEncoder</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">MarshallingEncoderbuildMarshallingEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">final</span> MarshallerFactorymarshallerFactory =Marshalling.getProvidedMarshallerFactory(<span class="string">&quot;serial&quot;</span>);</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">final</span> MarshallingConfigurationconfiguration = <span class="keyword">new</span> MarshallingConfiguration();</span><br><span class="line"></span><br><span class="line">​         configuration.setVersion(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">​         MarshallerProvider provider =<span class="keyword">new</span> DefaultMarshallerProvider(marshallerFactory, configuration);</span><br><span class="line"></span><br><span class="line">​         <span class="comment">//构建Netty的MarshallingEncoder对象，MarshallingEncoder用于实现序列化接口的POJO对象序列化为二进制数组</span></span><br><span class="line"></span><br><span class="line">​         MarshallingEncoder encoder =<span class="keyword">new</span> MarshallingEncoder(provider);</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> encoder;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gizp压缩与解压缩工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classGzipUtils &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] gzip(<span class="keyword">byte</span>[] val)<span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">​    ByteArrayOutputStream bos = newByteArrayOutputStream(val.length);</span><br><span class="line"></span><br><span class="line">​    GZIPOutputStream gos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      gos = <span class="keyword">new</span> GZIPOutputStream(bos);</span><br><span class="line"></span><br><span class="line">​      gos.write(val, <span class="number">0</span>, val.length);</span><br><span class="line"></span><br><span class="line">​      gos.finish();</span><br><span class="line"></span><br><span class="line">​      gos.flush();</span><br><span class="line"></span><br><span class="line">​      bos.flush();</span><br><span class="line"></span><br><span class="line">​      val = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (gos != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​        gos.close();</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (bos != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​        bos.close();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> val;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] unGzip(<span class="keyword">byte</span>[] buf)<span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">​    GZIPInputStream gzi = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​    ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      gzi = <span class="keyword">new</span> GZIPInputStream(newByteArrayInputStream(buf));</span><br><span class="line"></span><br><span class="line">​      bos = newByteArrayOutputStream(buf.length);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">byte</span>[] tmp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">while</span> ((count = gzi.read(tmp)) !=-<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">​        bos.write(tmp, <span class="number">0</span>, count);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​       buf = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​        bos.flush();</span><br><span class="line"></span><br><span class="line">​        bos.close();</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (gzi != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​        gzi.close();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> buf;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7.最佳实践"></a><strong>7.最佳实践</strong></h1><h2 id="（1）数据通信"><a href="#（1）数据通信" class="headerlink" title="（1）数据通信"></a><strong>（1）数据通信</strong></h2><p>我们需要了解在真正项目中如何使用Netty，大体上对于一些参数设置都是根据服务器性能决定的。我们需要考虑的问题是两台机器（甚至多台）使用Netty怎样进行通信。</p><p>大体上分为三种：<br>    ①使用长连接通道不断开的形式进行通信，也就是服务器和客户端的通道一直处于开启状态，如果服务器性能足够好，并且客户端数量也比较上的情况下，推荐这种方式。<br>    ②一次性批量提交数据，采用短连接方式。也就是说先把数据保存到本地临时缓存区或者临时表，当达到界值时进行一次性批量提交，又或者根据定时任务轮询提交，</p><p>这种情况的弊端是做不到实时性传输，对实时性要求不高的应用程序中推荐使用。<br>    ③使用一种特殊的长连接，在某一指定时间段内，服务器与某台客户端没有任何通信，则断开连接。下次连接则是客户端向服务器发送请求的时候，再次建立连接。<br>    在这里将介绍使用Netty实现第三种方式的连接，但是我们需要考虑两个因素：<br>    ①如何在超时（即服务器和客户端没有任何通信）后关闭通道？关闭通道后又如何再次建立连接？<br>    ②客户端宕机时，我们无需考虑，下次重启客户端之后就可以与服务器建立连接，但服务器宕机时，客户端如何与服务器端通信？</p><p>服务器端：增加了红色框部分</p><p><img src= "/img/loading.gif" data-lazy-src="img/6.png" alt="img"></p><p>客户端（注意红色字体部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHodler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">static</span> <span class="keyword">final</span> Client client = newClient();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> SingleHodler.client;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> EventLoopGroup workerGroup;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Bootstrap bootstrap;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ChannelFuture future;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Client</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"></span><br><span class="line">​    bootstrap.group(workerGroup)</span><br><span class="line"></span><br><span class="line">​        .channel(NioSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​        .handler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​          <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​          <span class="function"><span class="keyword">protected</span> <span class="title">voidinitChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​            socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​            socketChannel.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​             socketChannel.pipeline().addLast(newReadTimeoutHandler(<span class="number">5</span>)); <span class="comment">//5秒后未与服务器通信，则断开连接。</span></span><br><span class="line"></span><br><span class="line">​            socketChannel.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line"></span><br><span class="line">​          &#125;</span><br><span class="line"></span><br><span class="line">​        &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      future =bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8765</span>).sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">getFuture</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(future == <span class="keyword">null</span> ||!future.channel().isActive()) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">this</span>.connect();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> future;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">​    Client client = getInstance();</span><br><span class="line"></span><br><span class="line">​    ChannelFuture future = client.getFuture();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">​      Message message = <span class="keyword">new</span> Message(i,<span class="string">&quot;pro&quot;</span> + i, <span class="string">&quot;数据信息&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">​      future.channel().writeAndFlush(message);</span><br><span class="line"></span><br><span class="line">​      Thread.sleep(<span class="number">4000</span>); <span class="comment">//休眠4秒后再发送数据</span></span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;子线程开始....&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        ChannelFuture f =client.getFuture();</span><br><span class="line"></span><br><span class="line">​        Message message = newMessage(<span class="number">4</span>, <span class="string">&quot;pro&quot;</span> + <span class="number">4</span>, <span class="string">&quot;数据信息&quot;</span> + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">​         f.channel().writeAndFlush(message);</span><br><span class="line"></span><br><span class="line">​        f.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;).start();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;主线程退出......&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的类与之前的一样，没有变化。</p><p>运行结果：</p><p>**<img src= "/img/loading.gif" data-lazy-src="img/7.png" alt="img"><br>** </p><p>**<img src= "/img/loading.gif" data-lazy-src="img/8.png" alt="img"><br>** </p><h2 id="（2）心跳检测"><a href="#（2）心跳检测" class="headerlink" title="（2）心跳检测"></a><strong>（2）心跳检测</strong></h2><p>我们使用Socket通信一般经常会处理多个服务器之间的心跳检测，一般来讲我们去维护服务器集群，肯定要有一台或多台服务器主机（Master），然后还应该有N台（Slave），那么我们的主机肯定要时时刻刻知道自己下面的从服务器的各方面情况，然后进行实时监控的功能。这个在分布式架构里交做心跳检测或者心跳监控。最佳处理方案是使用一些通信框架进行实现，Netty就可以做这样的事。</p><p>这个例子需要使用Sigar，不熟悉的可以看<a href="http://364434006.iteye.com/blog/1747490">这篇文章</a>。</p><p>Server</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup bossGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup workerGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ServerBootstrap bootstrap = newServerBootstrap();</span><br><span class="line"></span><br><span class="line">​      bootstrap.group(bossGroup,workerGroup)</span><br><span class="line"></span><br><span class="line">​          .channel(NioServerSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​          .childHandler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​            <span class="function"><span class="keyword">protected</span> <span class="title">voidinitChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(<span class="keyword">new</span> ServerHeartBeatHandler());</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​          &#125;)</span><br><span class="line"></span><br><span class="line">​          .handler(newLoggingHandler(LogLevel.INFO))</span><br><span class="line"></span><br><span class="line">​          .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">​      ChannelFuture future =bootstrap.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, port)).sync();</span><br><span class="line"></span><br><span class="line">​      future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​       e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      bossGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​      workerGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">new</span> Server(<span class="number">8765</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServerHeartBeatHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classServerHeartBeatHandler extends ChannelHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt;AUTH_IP_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS_KEY =<span class="string">&quot;auth_success_key&quot;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">​    AUTH_IP_MAP.put(<span class="string">&quot;192.168.3.176&quot;</span>,<span class="string">&quot;1234&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">auth</span><span class="params">(ChannelHandlerContextctx, Object msg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    String[] rets = ((String)msg).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    String auth = AUTH_IP_MAP.get(rets[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(auth != <span class="keyword">null</span> &amp;&amp;auth.equals(rets[<span class="number">1</span>])) &#123;</span><br><span class="line"></span><br><span class="line">​      ctx.writeAndFlush(SUCCESS_KEY);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ctx.writeAndFlush(<span class="string">&quot;authfailure!&quot;</span>).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContextctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"></span><br><span class="line">​      auth(ctx, msg);</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> RequestInfo) &#123;</span><br><span class="line"></span><br><span class="line">​      RequestInfo info = (RequestInfo)msg;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前主机ip：&quot;</span> +info.getIp());</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前主机cpu：情况&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      Map&lt;String, Object&gt; cpuMap =info.getCpuPercMap();</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;总使用率：&quot;</span> + cpuMap.get(<span class="string">&quot;combined&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;用户使用率：&quot;</span> +cpuMap.get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;系统使用率：&quot;</span> +cpuMap.get(<span class="string">&quot;sys&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;等待率：&quot;</span> +cpuMap.get(<span class="string">&quot;wait&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;空闲率：&quot;</span> +cpuMap.get(<span class="string">&quot;idle&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前主机memory情况：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      Map&lt;String, Object&gt; memMap =info.getMemoryMap();</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;内存总量：&quot;</span> +memMap.get(<span class="string">&quot;total&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前内存使用量：&quot;</span> +memMap.get(<span class="string">&quot;used&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;当前内存剩余量：&quot;</span> +memMap.get(<span class="string">&quot;free&quot;</span>));</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;-----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      ctx.writeAndFlush(<span class="string">&quot;inforeceived!&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ctx.writeAndFlush(<span class="string">&quot;connectfailure&quot;</span>).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    EventLoopGroup workerGroup = newNioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      Bootstrap bootstrap = newBootstrap();</span><br><span class="line"></span><br><span class="line">​      bootstrap.group(workerGroup)</span><br><span class="line"></span><br><span class="line">​          .channel(NioSocketChannel.class)</span><br><span class="line"></span><br><span class="line">​          .handler(newChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannelsc)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</span><br><span class="line"></span><br><span class="line">​              sc.pipeline().addLast(<span class="keyword">new</span> ClientHeartBeatHandler());</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​          &#125;);</span><br><span class="line"></span><br><span class="line">​      ChannelFuture future =bootstrap.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8765</span>)).sync();</span><br><span class="line"></span><br><span class="line">​      future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      workerGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClientHeartBeatHandler类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classClientHeartBeatHandler extends ChannelHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ScheduledExecutorService scheduled= Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ScheduledFuture&lt;?&gt; heartBeat;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> InetAddress address;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS_KEY =<span class="string">&quot;auth_success_key&quot;</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    address = InetAddress.getLocalHost();</span><br><span class="line"></span><br><span class="line">​    String ip = address.getHostAddress();</span><br><span class="line"></span><br><span class="line">​    String key = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"></span><br><span class="line">​    String auth = ip + <span class="string">&quot;,&quot;</span> + key;</span><br><span class="line"></span><br><span class="line">​    ctx.writeAndFlush(auth);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidexceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    cause.printStackTrace();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(heartBeat != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​      heartBeat.cancel(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">​      heartBeat = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    ctx.fireExceptionCaught(cause);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">voidchannelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"></span><br><span class="line">​        String data = (String) msg;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span>(SUCCESS_KEY.equals(data)) &#123;</span><br><span class="line"></span><br><span class="line">​          heartBeat =scheduled.scheduleWithFixedDelay(<span class="keyword">new</span> HeartBeatTask(ctx), <span class="number">0</span>, <span class="number">5</span>,TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">​          System.out.println(msg);</span><br><span class="line"></span><br><span class="line">​        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​          System.out.println(msg);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">​      ReferenceCountUtil.release(msg);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeatTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandlerContextctx;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    publicHeartBeatTask(ChannelHandlerContext ctx) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">this</span>.ctx = ctx;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">​    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​        RequestInfo requestInfo = newRequestInfo();</span><br><span class="line"></span><br><span class="line">​        requestInfo.setIp(address.getHostAddress());</span><br><span class="line"></span><br><span class="line">​        Sigar sigar = <span class="keyword">new</span> Sigar();</span><br><span class="line"></span><br><span class="line">​        CpuPerc cpuPerc =sigar.getCpuPerc();</span><br><span class="line"></span><br><span class="line">​        Map&lt;String, Object&gt;cpuPercMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">​         cpuPercMap.put(<span class="string">&quot;combined&quot;</span>,cpuPerc.getCombined());</span><br><span class="line"></span><br><span class="line">​        cpuPercMap.put(<span class="string">&quot;user&quot;</span>, cpuPerc.getUser());</span><br><span class="line"></span><br><span class="line">​        cpuPercMap.put(<span class="string">&quot;sys&quot;</span>,cpuPerc.getSys());</span><br><span class="line"></span><br><span class="line">​        cpuPercMap.put(<span class="string">&quot;wait&quot;</span>, cpuPerc.getWait());</span><br><span class="line"></span><br><span class="line">​        cpuPercMap.put(<span class="string">&quot;idle&quot;</span>,cpuPerc.getIdle());</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​        Mem mem = sigar.getMem();</span><br><span class="line"></span><br><span class="line">​        Map&lt;String, Object&gt;memoryMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">​        memoryMap.put(<span class="string">&quot;total&quot;</span>, mem.getTotal() / (<span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line">​        memoryMap.put(<span class="string">&quot;used&quot;</span>,mem.getUsed() / (<span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line">​        memoryMap.put(<span class="string">&quot;free&quot;</span>,mem.getFree() / (<span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​        requestInfo.setCpuPercMap(cpuPercMap);</span><br><span class="line"></span><br><span class="line">​        requestInfo.setMemoryMap(memoryMap);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​        ctx.writeAndFlush(requestInfo);</span><br><span class="line"></span><br><span class="line">​      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">​        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RequestInfo类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> classRequestInfo implements Serializable &#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">private</span> String ip ;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">private</span> Map&lt;String, Object&gt;cpuPercMap ;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">private</span> Map&lt;String, Object&gt;memoryMap;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//.. other field</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> ip;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">this</span>.ip = ip;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> Map&lt;String, Object&gt;getCpuPercMap() &#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> cpuPercMap;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="function"><span class="keyword">public</span> <span class="title">voidsetCpuPercMap</span><span class="params">(Map&lt;String, Object&gt; cpuPercMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">this</span>.cpuPercMap = cpuPercMap;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> Map&lt;String, Object&gt;getMemoryMap() &#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">return</span> memoryMap;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemoryMap</span><span class="params">(Map&lt;String,Object&gt; memoryMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​         <span class="keyword">this</span>.memoryMap = memoryMap;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MarshallingCodeCFactory类就不贴出来了，跟之前的一样。</p><p>运行结果：</p><p><img src= "/img/loading.gif" data-lazy-src="img/9.png" alt="img"><br><img src= "/img/loading.gif" data-lazy-src="img/10.png" alt="img"></p><p>每5秒发送一次数据到服务器端，这样主服务器就可以知道每台从服务器的状态了。当然，这只是一个简单的小例子，真实环境中肯定需要更严格的校验。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="2020/09/28/my-first-blog/"/>
      <url>2020/09/28/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo部分命令"><a href="#hexo部分命令" class="headerlink" title="hexo部分命令"></a>hexo部分命令</h2><p>hexo n “博客大标题”<br>hexo clean  清理缓存<br>hexo g  更新全局<br>hexo s  本地启动<br>hexo d  远端部署（github)</p><hr><h2 id="在命令窗口下操作"><a href="#在命令窗口下操作" class="headerlink" title="在命令窗口下操作"></a>在命令窗口下操作</h2><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
